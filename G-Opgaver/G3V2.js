// vi definerer de 4 mulige variable der kan v칝re p친 engen. 
const gr칝s = "游꺔游꺔";
const bi = "游냏游꺔";
const blomst = "游꺔游꺝";
const blomstBi = "游냏游꺝";


// Koden kan kun k칮res med 1 blomsterbed 
// BlomsterEng klasse, opgavekrav 
class BlomsterEng {
    constructor(h칮jde, bredde, antalBier) {
        if (h칮jde < 5 || bredde < 5) { // tjekker om marken er mindst 5x5, opgavekrav
            throw new Error("Eng skal mindst v칝re 5x5"); 
        }
        this.h칮jde = h칮jde; 
        this.bredde = bredde; 
        this.myEng = this.opretEng(); // n친r klassen kaldes k칮res constructoren 1 gang, ved at s칝tte opretEng() i constructoren opretter vi vores array n친r vi kalder p친 my.Eng 
        this.antalBier = antalBier;
        this.nuv칝rendeBier = 0; // G칮r det muligt at tracke antallet af bier der er fjernet og sat tilbage
        this.antalBlomster = 0; 
    }

    opretEng() {
        return Array.from({ length: this.h칮jde }, () => 
            Array.from({ length: this.bredde }, () => gr칝s)
        ); // function der genere array med h칮jde og bredde dimensioner og putter gr칝s i hvert felt. 
    }
    
    placerBlomsterBed() { // vi finder det punkt hvor der 칮verste venstre blomst kan placeres, s친 der er nok plads til at printe resten af 3x3'et 
        let h칮jdeIndexBlomsterBed = Math.floor(Math.random() * (this.h칮jde - 2)); 
        let breddeIndexBlomsterBed = Math.floor(Math.random() * (this.bredde - 2)); // man skal have 3 pladser til at printe et 3x3 blomsterbed s친 vi minusser 2 fra alle de mulige ydre punkter. 
        
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) { // laver et loop der k칮rer 3 gange for de 3 r칝kker
                this.myEng[h칮jdeIndexBlomsterBed + i][breddeIndexBlomsterBed + j] = blomst; // placere en blomst i hver felt 
                this.antalBlomster++; // justere antallet af blomster for hvert placerede felt
            }
        }
    }

    placerBier (){
        while (this.nuv칝rendeBier < this.antalBier) { // sikrer at vi ikke overskrider antal 칮nskede bier
            let h칮jdeIndexBi = Math.floor(Math.random() * (this.h칮jde));
            let breddeIndexBi = Math.floor(Math.random() * (this.bredde));

            if(this.myEng[h칮jdeIndexBi][breddeIndexBi] === gr칝s){ // hele engen er gr칝s til at starte med 
                this.myEng[h칮jdeIndexBi][breddeIndexBi] = bi;
                this.nuv칝rendeBier++;
            }
        }
    }

    bev칝geBier () { // vi bev칝ger bierne ved at fjerne dem alle ogs친 tilf칝ldigt placere dem tilbage i vores array 

        for (let i = 0; i < this.h칮jde; i++) {
            for (let j = 0; j < this.bredde; j++){ // vi gennemg친r hele arrayet
                if (this.myEng[i][j]=== bi ||this.myEng[i][j]=== blomstBi){ // finder de punkter hvor der er bier 
                    if (this.myEng[i][j]=== blomstBi){ // hvis blomst skal vi fjerne blomst og bi 
                        this.myEng[i][j]= gr칝s; 
                        this.nuv칝rendeBier--;; 
                        this.antalBlomster--; 
                    } else if (this.myEng[i][j]=== bi){ // hvis bi s친 er det kun bien der skal fjernes 
                        this.myEng[i][j]= gr칝s; 
                        this.nuv칝rendeBier--; 
                    }
                }
            }
        }

        while (this.nuv칝rendeBier < this.antalBier) { // indtil der er 칮nsket antal bier er lagt tilbage i 
            let h칮jdeIndexBi = Math.floor(Math.random() * (this.h칮jde)); // random x v칝rdi 
            let breddeIndexBi = Math.floor(Math.random() * (this.bredde)); // random y v칝rdi 

            if(this.myEng[h칮jdeIndexBi][breddeIndexBi] === blomst){ // hvis valgte felt er blomst, s친 blomstBi 
                this.myEng[h칮jdeIndexBi][breddeIndexBi] = blomstBi;
                this.nuv칝rendeBier++; // juster antal bier 

            } else if (this.myEng[h칮jdeIndexBi][breddeIndexBi] === gr칝s){ // hvis valgte felt er gr칝s, s친 bi 
                this.myEng[h칮jdeIndexBi][breddeIndexBi] = bi;
                this.nuv칝rendeBier++; // juster antal bier 
            }
        }
    }
}

class Simulation { // Simulation klasse, opgavekrav 
    constructor (h칮jde,bredde,blomsterbed,bier){ 
        this.h칮jde = h칮jde; 
        this.bredde = bredde;
        this.blomsterbed = blomsterbed; // 3x3 blomster 
        this.bier = bier; // antal bier fra argumentet 
        this.eng = new BlomsterEng(h칮jde,bredde,bier) // opretter en ny BlomsterEng/Mark
        // som sagt tidligere s친 bliver der oprettet et array n친r man kalder p친 blomster klassen 
        
    }

    run(){

        for (let i = 0; i < this.blomsterbed; i++){ // Simulationen funger egentlig kun med 1 bed, men med forloopet kan man v칝lge antallet af bed, hvis funktionalitet blev implementeret
            this.eng.placerBlomsterBed(); // vi starter med at tilf칮je blomster
        }


        this.eng.placerBier(); 
        

        console.log(this.eng.myEng) // printer start situationen ud
       

        let antalRunder = 0; 
        while (this.eng.antalBlomster > 0){ // k칮rer simulation indtil der ikke er flere blomster tilbage
            console.log(antalRunder);
            this.eng.bev칝geBier();
            antalRunder++;
            console.log(this.eng.myEng);
            
        }
    }
}

const minSim = new Simulation(5,6,1,3); // der kun dog kun bruges 1 blomsterbed i denne opgave, det opfylder opgavens krav, men der st친r dog at man skal kunne lave flere. 
minSim.run();

















